using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Helpers;
using System.Text.RegularExpressions;
using Microsoft.WindowsAzure.Mobile.Service;
using Microsoft.WindowsAzure.Mobile.Service.Security;
using alltheairgeadmobileService.Models;
using alltheairgeadmobileService.DataObjects;
using EmailValidation;

namespace alltheairgeadmobileService.Controllers
{
    [AuthorizeLevel(AuthorizationLevel.Anonymous)]
    public class CustomRegistrationController : ApiController
    {
        public ApiServices Services { get; set; }

        /// <summary>
        /// POST api/CustomRegistration
        /// </summary>
        public HttpResponseMessage Post(RegistrationRequest Request)
        {
            // Validate the email format
            if (!EmailValidator.Validate(Request.Email, true))
            {
                return this.Request.CreateResponse(HttpStatusCode.BadRequest, "Invalid email format");
            }
            // Validate the password
            else if (Request.Password.Length < 6)
            {
                return this.Request.CreateResponse(HttpStatusCode.BadRequest, "Invalid password (at least 8 chars required)");
            }

            // Use local database context for testing local to service
            //alltheairgeadmobileContext context = new alltheairgeadmobileContext();
            // Setup the database connection to the remote server
            alltheairgeadContext context = new alltheairgeadContext(Services.Settings["ExistingDbConnectionString"]);
            // Check that the account doesn't already exist
            UserProfile account = context.UserProfiles.Where(a => a.Email == Request.Email).SingleOrDefault();
            if (account != null)
            {
                return this.Request.CreateResponse(HttpStatusCode.BadRequest, "Email already exists");
            }
            // Otherwise create a new account
            else
            {
                // Build new account from provided email.
                UserProfile newAccount = new UserProfile
                {
                    Email = Request.Email
                };
                // Add the email to the userprofiles table
                context.UserProfiles.Add(newAccount);
                context.SaveChanges();

                // Get autogenerated UserId to use.
                newAccount = context.UserProfiles.Where(a => a.Email == Request.Email).SingleOrDefault();
                // Build a new membership item for the webpages_Membershup table
                webpages_Membership newMembership = new webpages_Membership
                {
                    UserId = newAccount.UserId,
                    CreateDate = DateTime.Now,
                    IsConfirmed = true,
                    LastPasswordFailureDate = null,
                    PasswordFailuresSinceLastSuccess = 0,
                    Password = Crypto.HashPassword(Request.Password),
                    PasswordChangedDate = null,
                    PasswordSalt = "blank",
                    PasswordVerificationToken = null,
                    PasswordVerificationTokenExpirationDate = null
                };
                // Add to the table
                context.Memberships.Add(newMembership);
                context.SaveChanges();

                // Return the successful response
                return this.Request.CreateResponse(HttpStatusCode.Created);
            }
        }
    }
}
